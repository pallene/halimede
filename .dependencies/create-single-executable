#!/usr/bin/env sh
# This file is part of halimede. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT. No part of halimede, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015-2016 The developers of halimede. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT.


set -e
set -u
set -f

# pdksh / mksh have problems with unsetting a variable that was never set...
if [ "${CDPATH+set}" = 'set' ]; then
	unset CDPATH
fi

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

_create_single_executable_processModules_fileOrFolderIsIgnored()
{
	local withoutModuleName="$1"
	
	local ignoreFilePath="$moduleName"/.luajit-ignore
	if [ ! -s "$ignoreFilePath" ]; then
		return 1
	fi
	
	grep -q '^'"$withoutModuleName"'$' "$ignoreFilePath"
}

_create_single_executable_createByteCodeObject()
{
	local sourceLuaFilePath="$1"
	local requireName="$2"
	local outputFolderPath="$3"
	
	if [ "$create_single_executable_architecture" = 'native' ]; then
		"$create_single_executable_luajitBinaryFilePath" -b -s \
			-n "$requireName" \
			-t "$create_single_executable_objectFileExtension" \
			"$sourceLuaFilePath" \
			"$outputFolderPath"/"$requireName"."$create_single_executable_objectFileExtension"
	else
		"$create_single_executable_luajitBinaryFilePath" -b -s \
			-n "$requireName" \
			-t "$create_single_executable_objectFileExtension" \
			-a "$create_single_executable_architecture" \
			-o "$create_single_executable_operatingSystem" \
			"$sourceLuaFilePath" \
			"$outputFolderPath"/"$requireName"."$create_single_executable_objectFileExtension"
	fi
}

_create_single_executable_processModules_files()
{
	local folderPath="$1"
	
	local luaFilePath
	set +f
	for luaFilePath in "$folderPath"/*.lua
	do
		set -f
		if [ -f "$luaFilePath" ]; then
			local withoutModuleName="${luaFilePath#*/}"
			local withoutFileExtension="${luaFilePath%.lua}"
			
			if _create_single_executable_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
				:
			else
				
				local luaJitRequireName
				case "$withoutFileExtension" in
					
					*/init)
						luaJitRequireName="$(printf '%s' "$folderPath" | tr '/' '.')"
					;;
					
					*)
						luaJitRequireName="$(printf '%s' "$withoutFileExtension" | tr '/' '.')"
					;;
					
				esac
				_create_single_executable_createByteCodeObject "$luaFilePath" "$luaJitRequireName" "$outputFolderPath"
			fi
		fi
	done
	set -f
}

_create_single_executable_processModules_folders()
{
	local folderPath="$1"
	
	local luaFolderPath
	set +f
	for luaFolderPath in "$folderPath"/*
	do
		set -f
		if [ -d "$luaFolderPath" ]; then
			local withoutModuleName="${luaFolderPath#*/}"
			
			local folderName=""${luaFolderPath##*/}""
			case "$folderName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git)
					:
				;;
				
				*)	
					if _create_single_executable_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
						:
					else
						_create_single_executable_processModules_files "$luaFolderPath"
						_create_single_executable_processModules_folders "$luaFolderPath"
					fi
				;;
				
			esac
			
		fi
	done
	set -f
}

create_single_executable_processModules()
{
	set --
	cd "$modulesPath" 1>/dev/null 2>/dev/null
		
		set +f
		local moduleName
		for moduleName in *
		do
			if [ ! -d "$moduleName" ]; then
				continue
			fi
			
			if [ "$moduleName" = "$create_single_executable_generatedWrapperCodeModuleName" ]; then
				printf '%s\n' "Ignoring module '$moduleName' as this is auto-generated" 1>&2
			fi
			
			case "$moduleName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git) - they are not modules
					continue
				;;
				
			esac
	
			local outputFolderPath="$moduleName"/.luajit
			rm -rf "$outputFolderPath"
			mkdir -m 0700 -p "$outputFolderPath"
			
			_create_single_executable_processModules_files "$moduleName"
			_create_single_executable_processModules_folders "$moduleName"
			
			set +f
				"$create_single_executable_ar" rcus \
					"$outputFolderPath"/"libluajit_${moduleName}".a \
					"$outputFolderPath"/*."$create_single_executable_objectFileExtension"
			set -f
			
			set -- "$@" -L"$modulesPath"/"$outputFolderPath" -lluajit_${moduleName}
			
			# Add additional library paths, eg to link zlib
			# Isn't going to work well for native builds
			local potentialExtraLibraryPath
			if [ -n "${CROSS_COMPILE+set}" ]; then
				potentialExtraLibraryPath="$modulesPath"/"$moduleName"/.dependencies/sysroots/"$CROSS_COMPILE"/lib
			else
				potentialExtraLibraryPath="$modulesPath"/"$moduleName"/.dependencies/sysroots/native/lib
			fi
			if [ -d "$potentialExtraLibraryPath" ]; then
				set -- "$@" -L"$potentialExtraLibraryPath"
			fi
			
			# Add extra things, eg link libz with -lz
			local extraLibsToLink="$moduleName"/.luajit-libs
			if [ -s "$extraLibsToLink" ]; then
				local lib
				while IFS='' read -r lib
				do
					set -- "$@" -l"${lib}"
				done <"$extraLibsToLink"
			fi
		done
		
	cd - 1>/dev/null 2>/dev/null
	
	create_single_executable_processModules_createExecutable "$@"
}

create_single_executable_processModules_createExecutable()
{
	local outputFolderPath="$modulesPath"/"$create_single_executable_name"/.luajit
	local wrapperLuaFilePath="$outputFolderPath"/"$create_single_executable_generatedWrapperCodeModuleName".lua
	local wrapperLuaObjectFilePath="$outputFolderPath"/"$create_single_executable_generatedWrapperCodeModuleName"."$create_single_executable_objectFileExtension"
	
	sed -e 's/%MODULE_NAME%/'"${create_single_executable_name}"'/g' "$sourceFolderPath"/__main.lua >"$wrapperLuaFilePath"

	_create_single_executable_createByteCodeObject "$wrapperLuaFilePath" "$create_single_executable_generatedWrapperCodeModuleName" "$outputFolderPath"
	
	local singleExecutableBinaryFilePath
	if [ -n "${CROSS_COMPILE+set}" ]; then
		singleExecutableBinaryFilePath="$outputFolderPath"/"${CROSS_COMPILE}${create_single_executable_name}"
	else
		singleExecutableBinaryFilePath="$outputFolderPath"/"$create_single_executable_name"
	fi

	if $create_single_executable_setIsMacOsX; then
		set -- -pipe \
			-pagezero_size 10000 -image_base 100000000 \
			-g0 -O2 -Wall \
			-I"$crossSysrootFolderPath"/include/luajit-2.0 \
			-L"$crossSysrootFolderPath"/lib \
			-o "$singleExecutableBinaryFilePath" \
			"$sourceFolderPath"/__main.c "$wrapperLuaObjectFilePath" \
			-lm -ldl \
			-Wl,-all_load \
			-lluajit-5.1 "$@"
	else
		set -- -pipe \
			-g0 -O2 -Wall \
			-I"$crossSysrootFolderPath"/include/luajit-2.0 \
			-L"$crossSysrootFolderPath"/lib \
			-o "$singleExecutableBinaryFilePath" \
			-static -Wl,-Bstatic \
			"$sourceFolderPath"/__main.c "$wrapperLuaObjectFilePath" \
			-Wl,--whole-archive -lluajit-5.1 "$@" -lc -lm -ldl -Wl,--no-whole-archive -Wl,--export-dynamic
	fi
	
	"$create_single_executable_cc" "$@"
	
	if [ "$create_single_executable_setIsMacOsX" ]; then
		:
	else
		"$create_single_executable_strip" --strip-all "$singleExecutableBinaryFilePath" 2>/dev/null || true
	fi
}

_create_single_executable_printHelp()
{
	cat <<-EOF
		Usage: create-single-executable NAME [OPERATING_SYSTEM ARCHITECTURE]
		Usage: create-single-executable -h|--help
		
		Options:
		  NAME              A module with a init.lua file to run as the first piece of code
		  OPERATING_SYSTEM  One of linux, windows, osx, freebsd, netbsd, openbsd, dragonfly or solaris
		                    If omitted the native system is used
		  ARCHITECTURE      One of x86, x64, arm, arm64 (LuaJIT 2.1 only), ppc, mips or mipsel
		                    If omitted the native system is used
		
		Environment Variables:
		  CROSS_COMPILE     If specified, used as a prefix to the 'ar' program
		
		Example
		  CROSS_COMPILE='x86_64-linux-musl-' ./create-single-executable cvetool linux x64
	EOF
}

create_single_executable_showHelp()
{
	_create_single_executable_printHelp
	
	exit 0
}

create_single_executable_showError()
{
	local errorMessage="$1"
	
	{
		printf 'Error: %s\n' "$errorMessage"
		_create_single_executable_printHelp
	} 1>&2
	
	exit 1
}

create_single_executable_compileNativeLuaJitIfMissing()
{
	if [ ! -x "$create_single_executable_luajitBinaryFilePath" ]; then
		"$halimedeDependenciesFolderPath"/compile-luajit 'native'
	fi
}

create_single_executable_compileCrossLuaJitIfMissing()
{
	if [ -n "${CROSS_COMPILE+set}" ]; then
		crossSysrootFolderPath="$sysrootsFolderPath"/"$CROSS_COMPILE"
		if [ ! -x "$crossSysrootFolderPath"/bin/luajit ]; then
			"$halimedeDependenciesFolderPath"/compile-luajit "$CROSS_COMPILE"
		fi
	else
		crossSysrootFolderPath="$nativeSysrootFolderPath"
	fi
}

create_single_executable_locateCrossCompileBinary()
{
	local binaryName="$1"
	
	if [ -n "${CROSS_COMPILE+set}" ]; then
		crossCompileBinaryName="${CROSS_COMPILE}${binaryName}"
	else
		crossCompileBinaryName="$binaryName"
	fi
	if ! command -v "$crossCompileBinaryName" 1>/dev/null 2>/dev/null; then
		printf '%s\n' "Error:Could not locate $binaryName cross-compile binary as '$crossCompileBinaryName'"
	fi
}

_create_single_executable_parseCommandLineArguments_checkName()
{
	local firstModule="$modulesPath"/"$create_single_executable_name"/init.lua
	if [ ! -s "$firstModule" ]; then
		create_single_executable_showError "Please specify a NAME for a module that exists - '$firstModule' does not"
	fi
}

create_single_executable_parseCommandLineArguments()
{
	case "$#" in
		
		1)
			if [ "$1" = '-h' ]; then
				create_single_executable_showHelp
			elif [ "$1" = '--help' ]; then
				create_single_executable_showHelp
			else
				create_single_executable_name="$1"
				_create_single_executable_parseCommandLineArguments_checkName
				create_single_executable_operatingSystem='native'
				create_single_executable_architecture='native'
				create_single_executable_objectFileExtension='o'
			fi
		;;
		
		3)
			create_single_executable_name="$1"
			_create_single_executable_parseCommandLineArguments_checkName
			
			create_single_executable_operatingSystem="$2"
			case "$create_single_executable_operatingSystem" in
				
				linux|windows|osx|freebsd|netbsd|openbsd|dragonfly|solaris)
					if [ "$create_single_executable_operatingSystem" = 'windows' ]; then
						create_single_executable_objectFileExtension='obj'
					else
						create_single_executable_objectFileExtension='o'
					fi
				;;
				
				*)
					create_single_executable_showError "Unrecognised OPERATING_SYSTEM '$create_single_executable_operatingSystem'"
				;;
				
			esac
			
			create_single_executable_architecture="$3"
			case "$create_single_executable_architecture" in
				
				x86|x64|arm|arm64)
					# Note: arm64 is only supported on LuaJIT 2.1
					:
				;;
				
				ppc|mips|mipsel)
					if [ "$create_single_executable_operatingSystem" = 'windows' ]; then
						create_single_executable_showError "Unsupported ARCHITECTURE '$create_single_executable_architecture' for OPERATING_SYSTEM '$create_single_executable_operatingSystem'"
					fi
				;;
				
				*)
					create_single_executable_showError "Unrecognised ARCHITECTURE '$create_single_executable_architecture'"
				;;
				
			esac
		;;
		
		*)
			create_single_executable_showError "Please specify only NAME, OPERATING_SYSTEM and ARCHITECTURE"
		;;
		
	esac
}

create_single_executable_setIsMacOsX()
{
	create_single_executable_setIsMacOsX=false
	
	case "$create_single_executable_operatingSystem" in
		
		osx)
			create_single_executable_setIsMacOsX=true
		;;
		
		native)
			case "$(uname)" in
				
				Darwin)
					create_single_executable_setIsMacOsX=true
				;;
				
			esac
		;;
		
	esac
}

create_single_executable_main()
{
	local _program_path="$(_program_path_find)"
	cd "$_program_path"/../.. 1>/dev/null 2>/dev/null
		local modulesPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	
	local create_single_executable_name
	local create_single_executable_operatingSystem
	local create_single_executable_architecture
	local create_single_executable_objectFileExtension
	create_single_executable_parseCommandLineArguments "$@"
	
	local create_single_executable_isMacOsX
	create_single_executable_setIsMacOsX
	
	local binaryFilePath
	create_single_executable_locateCrossCompileBinary ar
	create_single_executable_ar="$crossCompileBinaryName"
	create_single_executable_locateCrossCompileBinary cc
	create_single_executable_cc="$crossCompileBinaryName"
	create_single_executable_locateCrossCompileBinary strip
	create_single_executable_strip="$crossCompileBinaryName"
	

	local halimedeDependenciesFolderPath="$modulesPath"/halimede/.dependencies
	local sourceFolderPath="$halimedeDependenciesFolderPath"/source
	local sysrootsFolderPath="$halimedeDependenciesFolderPath"/sysroots
	local nativeSysrootFolderPath="$sysrootsFolderPath"/native
	local create_single_executable_luajitBinaryFilePath="$nativeSysrootFolderPath"/bin/luajit
	create_single_executable_compileNativeLuaJitIfMissing
	
	local crossSysrootFolderPath
	create_single_executable_compileCrossLuaJitIfMissing

	local create_single_executable_generatedWrapperCodeModuleName='__main'
	
	create_single_executable_processModules
}
create_single_executable_main "$@"
