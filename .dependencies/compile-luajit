#!/usr/bin/env sh
# This file is part of halimede. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT. No part of halimede, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015-2016 The developers of halimede. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT.


set -e
set -u
set -f

# pdksh / mksh have problems with unsetting a variable that was never set...
if [ "${CDPATH+set}" = 'set' ]; then
	unset CDPATH
fi

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

_compile_luajit_cleanUp()
{
	if command -v git 1>/dev/null 2>/dev/null; then
		git clean -d --force --quiet -x
	fi
	make clean 1>&2 || true
}

compile_luajit_forATarget()
{
	local crossCompile="$1"
	
	# LuaJIT compilation isn't particularly parallelisable; this setting on a Mac Pro 8-core shaved about 0.5 seconds off
	local parallelismJobCount=8
	
	set --
	if [ -z "$crossCompile" ]; then
		local prefixFolderPath="$sysrootsFolderPath"/native
		local target='native'
		set -- "$@" CC=cc DEFAULT_CC=cc HOST_CC=cc
	else
		local prefixFolderPath="$sysrootsFolderPath"/"$crossCompile"
		local target="$crossCompile"
		
		local targetSystem
		case "$crossCompile" in
			
			*-apple-*|-darwin*)
				targetSystem=Darwin
			;;
			
			*mingw*)
				targetSystem=Windows
			;;
			
			*-linux-*)
				targetSystem=Linux
			;;
			
			*sun*|*solaris*)
				targetSystem=SunOS
			;;
			
			*)
				targetSystem=Linux
			;;
			
		esac
		
		set -- "$@" CC=cc DEFAULT_CC=cc HOST_CC=cc CROSS="$crossCompile" TARGET_SYS="$targetSystem"
	fi
	
	rm -rf "$prefixFolderPath"
	mkdir -m 0700 -p "$prefixFolderPath"
	
	cd "$sourceFolderPath"/LuaJIT 1>/dev/null 2>/dev/null
		_compile_luajit_cleanUp
		set +e
			make -j $parallelismJobCount amalg Q='' PREFIX="$prefixFolderPath" "$@" 1>&2
			local exitCode=$?
		set -e
		if [ $exitCode -ne 0 ]; then
			_compile_luajit_cleanUp
			printf '%s\n' "Failed to compile LuaJIT for target '$target'"
			exit 1
		fi
		set +e
			make -j $parallelismJobCount install PREFIX="$prefixFolderPath" 1>&2
			local exitCode=$?
		set -e
		_compile_luajit_cleanUp
		if [ $exitCode -ne 0 ]; then
			printf '%s\n' "Failed to install LuaJIT for target '$target'"
			exit 1
		fi
	cd - 1>/dev/null 2>/dev/null
}

_compile_luajit_printHelp()
{
	cat <<-EOF
		Usage: compile-luajit TARGET
		Usage: compile-luajit -h|--help
		
		Options:
		  TARGET  Either 'native' or a CROSS_COMPILE prefix (including hyphen), eg 'x86_64-linux-musl-'
		
		Example
		  ./compile-luajit x86_64-linux-musl-
	EOF
}

compile_luajit_showHelp()
{
	_compile_luajit_printHelp
	
	exit 0
}

compile_luajit_showError()
{
	local errorMessage="$1"
	
	{
		printf 'Error: %s\n' "$errorMessage"
		_compile_luajit_printHelp
	} 1>&2
	
	exit 1
}

compile_luajit_parseCommandLineArguments()
{
	case "$#" in
		
		1)
			if [ "$1" = '-h' ]; then
				compile_luajit_showHelp
			elif [ "$1" = '--help' ]; then
				compile_luajit_showHelp
			else
				compile_luajit_target="$1"
			fi
		;;
		
		*)
			compile_luajit_showHelp "Please specify only TARGET"
		;;
		
	esac
}

compile_luajit_main()
{
	local _program_path="$(_program_path_find)"
	cd "$_program_path" 1>/dev/null 2>/dev/null
		local sourceFolderPath="$(pwd)"/source
		local sysrootsFolderPath="$(pwd)"/sysroots
	cd - 1>/dev/null 2>/dev/null
	
	local compile_luajit_target
	compile_luajit_parseCommandLineArguments "$@"
	
	if [ "$compile_luajit_target" = 'native' ]; then
		compile_luajit_forATarget ''
	else
		compile_luajit_forATarget "$compile_luajit_target"
	fi
}
compile_luajit_main "$@"
