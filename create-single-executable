#!/usr/bin/env sh
# This file is part of halimede. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT. No part of halimede, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015-2016 The developers of halimede. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT.


set -e
set -u
set -f

# pdksh / mksh have problems with unsetting a variable that was never set...
if [ "${CDPATH+set}" = 'set' ]; then
	unset CDPATH
fi

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

create_single_executable_findLuajitBinaryFilePath()
{
	# Also kahlua.sh, luaj
	local luajitBinary
	for luajitBinary in luajit-2.0.4 luajit
	do
		if command -v "$luajitBinary" 1>/dev/null 2>/dev/null; then
			create_single_executable_luajitBinaryFilePath="$(command -v "$luajitBinary")"
			return 0
		fi
	done
	
	printf '%s\n' "Could not find a LuaJIT binary on the PATH ('$PATH')" 1>&2
	exit 1
}

_create_single_executable_processModules_fileOrFolderIsIgnored()
{
	local withoutModuleName="$1"
	
	local ignoreFilePath="$moduleName"/.luajit-ignore
	if [ ! -s "$ignoreFilePath" ]; then
		return 1
	fi
	
	grep -q '^'"$withoutModuleName"'$' "$ignoreFilePath"
}

_create_single_executable_createByteCodeObject()
{
	local sourceLuaFilePath="$1"
	local requireName="$2"
	local outputFolderPath="$3"
	
	"$create_single_executable_luajitBinaryFilePath" -b -s \
		-n "$requireName" \
		-t "$create_single_executable_objectFileExtension" \
		-a "$create_single_executable_architecture" \
		-o "$create_single_executable_operatingSystem" \
		"$sourceLuaFilePath" \
		"$outputFolderPath"/"$requireName"."$create_single_executable_objectFileExtension"
}

_create_single_executable_processModules_files()
{
	local folderPath="$1"
	
	local luaFilePath
	set +f
	for luaFilePath in "$folderPath"/*.lua
	do
		set -f
		if [ -f "$luaFilePath" ]; then
			local withoutModuleName="${luaFilePath#*/}"
			local withoutFileExtension="${luaFilePath%.lua}"
			
			if _create_single_executable_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
				:
			else
				
				local luaJitRequireName
				case "$withoutFileExtension" in
					
					*/init)
						luaJitRequireName="$(printf '%s' "$folderPath" | tr '/' '.')"
					;;
					
					*)
						luaJitRequireName="$(printf '%s' "$withoutFileExtension" | tr '/' '.')"
					;;
					
				esac
				_create_single_executable_createByteCodeObject "$luaFilePath" "$luaJitRequireName" "$outputFolderPath"
			fi
		fi
	done
	set -f
}

_create_single_executable_processModules_folders()
{
	local folderPath="$1"
	
	local luaFolderPath
	set +f
	for luaFolderPath in "$folderPath"/*
	do
		set -f
		if [ -d "$luaFolderPath" ]; then
			local withoutModuleName="${luaFolderPath#*/}"
			
			local folderName=""${luaFolderPath##*/}""
			case "$folderName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git)
					:
				;;
				
				*)	
					if _create_single_executable_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
						:
					else
						_create_single_executable_processModules_files "$luaFolderPath"
						_create_single_executable_processModules_folders "$luaFolderPath"
					fi
				;;
				
			esac
			
		fi
	done
	set -f
}

create_single_executable_processModules()
{
	set --
	cd "$modulesPath" 1>/dev/null 2>/dev/null
		
		set +f
		local moduleName
		for moduleName in *
		do
			if [ ! -d "$moduleName" ]; then
				continue
			fi
			
			if [ "$moduleName" = "$create_single_executable_generatedWrapperCodeModuleName" ]; then
				printf '%s\n' "Ignoring module '$moduleName' as this is auto-generated" 1>&2
			fi
			
			local folderName=""${luaFolderPath##*/}""
			case "$folderName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git) - they are not modules
					continue
				;;
				
			esac
	
			local outputFolderPath="$moduleName"/.luajit
			rm -rf "$outputFolderPath"
			mkdir -m 0700 -p "$outputFolderPath"
			
			_create_single_executable_processModules_files "$moduleName"
			_create_single_executable_processModules_folders "$moduleName"
			
			set +f
				"$create_single_executable_ar" rcus \
					"$outputFolderPath"/"libluajit_${moduleName}".a \
					"$outputFolderPath"/*."$create_single_executable_objectFileExtension"
			set -f
			
			set -- "$@" -L"$modulesPath"/"$outputFolderPath" -Wl,--whole-archive -lluajit_${moduleName} -Wl,--no-whole-archive
			
			# Add extra things, eg link libz with -lz
			local extraLibsToLink="$moduleName"/.luajit-libs
			if [ -s "$extraLibsToLink" ]; then
				local lib
				while IFS='' read -r lib
				do
					set -- "$@" -Wl,--whole-archive -l"${lib}" -Wl,--no-whole-archive
				done <"$extraLibsToLink"
			fi
		done
		
	cd - 1>/dev/null 2>/dev/null
	
	create_single_executable_processModules_createExecutable '.' '.' "$@"
}

create_single_executable_processModules_createExecutable()
{
	local luajitInstallPath="$1"
	local luajitLibraryPath="$2"
	shift 2
	
	local outputFolderPath="$modulesPath"/"$create_single_executable_name"/.luajit
	local wrapperLuaFilePath="$outputFolderPath"/"$create_single_executable_generatedWrapperCodeModuleName".lua
	local wrapperLuaObjectFilePath="$outputFolderPath"/"$create_single_executable_generatedWrapperCodeModuleName"."$create_single_executable_objectFileExtension"
	
	# Create wrapper code
	cat >"$wrapperLuaFilePath" <<-EOF
		package.path = ''
		package.cpath = ''
		
		require("halimede")
		
		-- Workaround Lua not being able to require(_program_name) in _program_luaScript
		local moduleNameLocal = '${create_single_executable_name}'
		local module = halimede.setUpModule(moduleNameLocal)
		package.loaded[moduleNameLocal] = module
		
		-- Now run the real code
		require(moduleNameLocal)
	EOF

	_create_single_executable_createByteCodeObject "$wrapperLuaFilePath" "$create_single_executable_generatedWrapperCodeModuleName" "$outputFolderPath"
	
	# static linking does not work on Mac OS X
	"$create_single_executable_cc" -pipe \
		-I"$luajitInstallPath" -g0 -O2 -Wall \
		-static -Wl,-Bstatic \
		-o "$outputFolderPath"/"$create_single_executable_name" \
		-Wl,--export-dynamic "$modulesPath"/halimede/runtime.c "$wrapperLuaObjectFilePath" \
		"$@" \
		-L"$luajitLibraryPath" -Wl,--whole-archive -lluajit-5.1 -Wl,--no-whole-archive \
		 -Wl,--whole-archive -lc -lm -ldl -Wl,--no-whole-archive
	
	"$create_single_executable_strip" --strip-all "$outputFolderPath"/"$create_single_executable_name"
}

_create_single_executable_printHelp()
{
	cat <<-EOF
		Usage: luajit-compile OPERATING_SYSTEM ARCHITECTURE NAME
		Usage: luajit-compile -h|--help
		
		Options:
		  OPERATING_SYSTEM  One of linux, windows, osx, freebsd, netbsd, openbsd, dragonfly or solaris
		  ARCHITECTURE      One of x86, x64, arm, arm64 (LuaJIT 2.1 only), ppc, mips or mipsel
		  NAME              A module with a init.lua file to run as the first piece of code
		
		Environment Variables:
		  CROSS_COMPILE     If specified, used as a prefix to the 'ar' program
		
		Example
		  CROSS_COMPILE='x86_64-linux-musl-' ./luajit-compile linux x64
	EOF
}

create_single_executable_showHelp()
{
	_create_single_executable_printHelp
	
	exit 0
}

create_single_executable_showError()
{
	local errorMessage="$1"
	
	{
		printf 'Error: %s\n' "$errorMessage"
		_create_single_executable_printHelp
	} 1>&2
	
	exit 1
}

create_single_executable_locateCrossCompileBinary()
{
	local binaryName="$1"
	
	if [ -n "${CROSS_COMPILE+set}" ]; then
		crossCompileBinaryName="${CROSS_COMPILE}${binaryName}"
	else
		crossCompileBinaryName="$binaryName"
	fi
	if ! command -v "$crossCompileBinaryName" 1>/dev/null 2>/dev/null; then
		printf '%s\n' "Error:Could not locate $binaryName cross-compile binary as '$crossCompileBinaryName'"
	fi
}

create_single_executable_parseCommandLineArguments()
{
	case "$#" in
		
		1)
			if [ "$1" = '-h' ]; then
				create_single_executable_showHelp
			elif [ "$1" = '--help' ]; then
				create_single_executable_showHelp
			else
				create_single_executable_showError "Please specify OPERATING_SYSTEM and ARCHITECTURE"
			fi
		;;
		
		3)
			create_single_executable_operatingSystem="$1"
			case "$create_single_executable_operatingSystem" in
				
				linux|windows|osx|freebsd|netbsd|openbsd|dragonfly|solaris)
					if [ "$create_single_executable_operatingSystem" = 'windows' ]; then
						create_single_executable_objectFileExtension='obj'
					else
						create_single_executable_objectFileExtension='o'
					fi
				;;
				
				*)
					create_single_executable_showError "Unrecognised OPERATING_SYSTEM '$create_single_executable_operatingSystem'"
				;;
				
			esac
			
			create_single_executable_architecture="$2"
			case "$create_single_executable_architecture" in
				
				x86|x64|arm|arm64)
					# Note: arm64 is only supported on LuaJIT 2.1
					:
				;;
				
				ppc|mips|mipsel)
					if [ "$create_single_executable_operatingSystem" = 'windows' ]; then
						create_single_executable_showError "Unsupported ARCHITECTURE '$create_single_executable_architecture' for OPERATING_SYSTEM '$create_single_executable_operatingSystem'"
					fi
				;;
				
				*)
					create_single_executable_showError "Unrecognised ARCHITECTURE '$create_single_executable_architecture'"
				;;
				
			esac
			
			create_single_executable_name="$3"
			local firstModule="$modulesPath"/"$create_single_executable_name"/init.lua
			if [ ! -s "$firstModule" ]; then
				create_single_executable_showError "Please specify a NAME for a module that exists - '$firstModule' does not"
			fi
		;;
		
		*)
			create_single_executable_showError "Please specify only OPERATING_SYSTEM, ARCHITECTURE and NAME"
		;;
		
	esac
}

create_single_executable_main()
{
	local _program_path="$(_program_path_find)"
	cd "$_program_path"/.. 1>/dev/null 2>/dev/null
		local modulesPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	
	local create_single_executable_operatingSystem
	local create_single_executable_architecture
	local create_single_executable_objectFileExtension
	create_single_executable_parseCommandLineArguments "$@"
	
	local binaryFilePath
	create_single_executable_locateCrossCompileBinary ar
	create_single_executable_ar="$crossCompileBinaryName"
	create_single_executable_locateCrossCompileBinary cc
	create_single_executable_cc="$crossCompileBinaryName"
	create_single_executable_locateCrossCompileBinary strip
	create_single_executable_strip="$crossCompileBinaryName"
	
	local create_single_executable_luajitBinaryFilePath
	create_single_executable_findLuajitBinaryFilePath

	local create_single_executable_generatedWrapperCodeModuleName='__main'
	
	create_single_executable_processModules
}
create_single_executable_main "$@"
