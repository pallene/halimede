#!/usr/bin/env sh
# This file is part of halimede. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT. No part of halimede, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2015-2016 The developers of halimede. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/pallene/halimede/master/COPYRIGHT.


set -e
set -u
set -f

# pdksh / mksh have problems with unsetting a variable that was never set...
if [ "${CDPATH+set}" = 'set' ]; then
	unset CDPATH
fi

_program_path_find()
{
	if [ "${0%/*}" = "$0" ]; then

		# We've been invoked by the interpreter as, say, bash program
		if [ -r "$0" ]; then
			pwd -P
		# Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
		else
			printf '\n'
		fi
		
	else
	
		# We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
		
		_program_path_find_parentPath()
		{
			parentPath="${scriptPath%/*}"
			if [ -z "$parentPath" ]; then
				parentPath='/'
			fi
			cd "$parentPath" 1>/dev/null
		}
		
		if command -v realpath 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$(realpath "$0")"
				
				_program_path_find_parentPath
				pwd -P
			)
		elif command -v readlink 1>/dev/null 2>/dev/null; then
			(
				scriptPath="$0"
				
				while [ -L "$scriptPath" ]
				do
					_program_path_find_parentPath
					scriptPath="$(readlink "$scriptPath")"
				done

				_program_path_find_parentPath
				pwd -P
			)
		else
			# This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
			(
				scriptPath="$0"
				
				_program_path_find_parentPath
				pwd -P
			)
		fi
		
	fi
}

luajit_compile_findLuajitBinaryFilePath()
{
	# Also kahlua.sh, luaj
	local luajitBinary
	for luajitBinary in luajit-2.0.4 luajit
	do
		if command -v "$luajitBinary" 1>/dev/null 2>/dev/null; then
			luajit_compile_luajitBinaryFilePath="$(command -v "$luajitBinary")"
			return 0
		fi
	done
	
	printf '%s\n' "Could not find a LuaJIT binary on the PATH ('$PATH')" 1>&2
	exit 1
}

_luajit_compile_processModules_fileOrFolderIsIgnored()
{
	local withoutModuleName="$1"
	
	local ignoreFilePath="$moduleName"/.luajit-ignore
	if [ ! -s "$ignoreFilePath" ]; then
		return 1
	fi
	
	grep -q '^'"$withoutModuleName"'$' "$ignoreFilePath"
}

_luajit_compile_processModules_compile()
{	
	"$luajit_compile_luajitBinaryFilePath" -b -s \
		-n "$luaJitRequireName" \
		-t "$luajit_compile_objectFileExtension" \
		-a "$luajit_compile_architecture" \
		-o "$luajit_compile_operatingSystem" \
		"$luaFilePath" \
		"$outputFolderPath"/"$luaJitRequireName"."$luajit_compile_objectFileExtension"
}

_luajit_compile_processModules_files()
{
	local folderPath="$1"
	
	local luaFilePath
	set +f
	for luaFilePath in "$folderPath"/*.lua
	do
		set -f
		if [ -f "$luaFilePath" ]; then
			local withoutModuleName="${luaFilePath#*/}"
			local withoutFileExtension="${luaFilePath%.lua}"
			
			if _luajit_compile_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
				:
			else
				
				local luaJitRequireName
				case "$withoutFileExtension" in
					
					*/init)
						luaJitRequireName="$(printf '%s' "$folderPath" | tr '/' '.')"
					;;
					
					*)
						luaJitRequireName="$(printf '%s' "$withoutFileExtension" | tr '/' '.')"
					;;
					
				esac
				_luajit_compile_processModules_compile
			fi
		fi
	done
	set -f
}

_luajit_compile_processModules_folders()
{
	local folderPath="$1"
	
	local luaFolderPath
	set +f
	for luaFolderPath in "$folderPath"/*
	do
		set -f
		if [ -d "$luaFolderPath" ]; then
			local withoutModuleName="${luaFolderPath#*/}"
			
			local folderName=""${luaFolderPath##*/}""
			case "$folderName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git)
					:
				;;
				
				*)	
					if _luajit_compile_processModules_fileOrFolderIsIgnored "$withoutModuleName"; then
						:
					else
						_luajit_compile_processModules_files "$luaFolderPath"
						_luajit_compile_processModules_folders "$luaFolderPath"
					fi
				;;
				
			esac
			
		fi
	done
	set -f
}

luajit_compile_processModules()
{
	local arBinaryFilePath
	if [ -n "${CROSS_COMPILE+set}" ]; then
		arBinaryFilePath="${CROSS_COMPILE}"ar
	else
		arBinaryFilePath='ar'
	fi
	if ! command -v "$arBinaryFilePath" 1>/dev/null 2>/dev/null; then
		printf '%s\n' "Error:Could not locate ar binary '$arBinaryFilePath'"
	fi
	
	cd "$modulesPath" 1>/dev/null 2>/dev/null
		
		set +f
		local moduleName
		for moduleName in *
		do
			if [ ! -d "$moduleName" ]; then
				continue
			fi
			
			local folderName=""${luaFolderPath##*/}""
			case "$folderName" in
				
				'.'*)
					# Ignore 'hidden' folders (eg .git) - they are not modules
					continue
				;;
				
			esac
	
			local outputFolderPath="$moduleName"/.luajit
			rm -rf "$outputFolderPath"
			mkdir -m 0700 -p "$outputFolderPath"
			
			_luajit_compile_processModules_files "$moduleName"
			_luajit_compile_processModules_folders "$moduleName"
			
			set +f
				"$arBinaryFilePath" rcus \
					"$outputFolderPath"/"libluajit_${moduleName}".a \
					"$outputFolderPath"/*."$luajit_compile_objectFileExtension"
			set -f
			
			# TODO: Take into account may need to link libz
			printf '%s\n' "Link with -Wl,--whole-archive -lluajit_${moduleName} -Wl,--no-whole-archive -Wl,-E"
		done
		
	cd - 1>/dev/null 2>/dev/null
}

_luajit_compile_printHelp()
{
	cat <<-EOF
		Usage: luajit-compile OPERATING_SYSTEM ARCHITECTURE
		Usage: luajit-compile -h|--help
		
		Options:
		  OPERATING_SYSTEM  One of linux, windows, osx, freebsd, netbsd, openbsd, dragonfly or solaris
		  ARCHITECTURE      One of x86, x64, arm, ppc, ppcspe, mips or mipsel
		
		Environment Variables:
		  CROSS_COMPILE     If specified, used as a prefix to the 'ar' program
		
		Example
		  CROSS_COMPILE='x86_64-linux-musl-' ./luajit-compile linux x64
	EOF
}

luajit_compile_showHelp()
{
	_luajit_compile_printHelp
	
	exit 0
}

luajit_compile_showError()
{
	local errorMessage="$1"
	
	{
		printf 'Error: %s\n' "$errorMessage"
		_luajit_compile_printHelp
	} 1>&2
	
	exit 1
}

luajit_compile_main()
{
	local luajit_compile_operatingSystem
	local luajit_compile_architecture
	local luajit_compile_objectFileExtension
	case "$#" in
		
		0)
			luajit_compile_showError "Please specify OPERATING_SYSTEM and ARCHITECTURE"
		;;
		
		1)
			if [ "$1" = '-h' ]; then
				luajit_compile_showHelp
			elif [ "$1" = '--help' ]; then
				luajit_compile_showHelp
			else
				luajit_compile_showError "Please specify OPERATING_SYSTEM and ARCHITECTURE"
			fi
		;;
		
		2)
			luajit_compile_operatingSystem="$1"
			case "$luajit_compile_operatingSystem" in
				
				linux|windows|osx|freebsd|netbsd|openbsd|dragonfly|solaris)
					if [ "$luajit_compile_operatingSystem" = 'windows' ]; then
						luajit_compile_objectFileExtension='obj'
					else
						luajit_compile_objectFileExtension='o'
					fi
				;;
				
				*)
					luajit_compile_showError "Unrecognised OPERATING_SYSTEM '$luajit_compile_operatingSystem'"
				;;
				
			esac
			
			luajit_compile_architecture="$2"
			case "$luajit_compile_architecture" in
				
				x86|x64|arm)
					:
				;;
				
				ppc|ppcspe|mips|mipsel)
					if [ "$luajit_compile_operatingSystem" = 'windows' ]; then
						luajit_compile_showError "Unsupported ARCHITECTURE '$luajit_compile_architecture' for OPERATING_SYSTEM '$luajit_compile_operatingSystem'"
					fi
				;;
				
				*)
					luajit_compile_showError "Unrecognised ARCHITECTURE '$luajit_compile_architecture'"
				;;
				
			esac
		;;
		
		*)
			luajit_compile_showError "Please specify only OPERATING_SYSTEM and ARCHITECTURE"
		;;
		
	esac
	
	local _program_path="$(_program_path_find)"
	
	local luajit_compile_luajitBinaryFilePath
	luajit_compile_findLuajitBinaryFilePath
	
	cd "$_program_path"/.. 1>/dev/null 2>/dev/null
		local modulesPath="$(pwd)"
	cd - 1>/dev/null 2>/dev/null
	luajit_compile_processModules
}
luajit_compile_main "$@"
